---
- name: Include vars.
  include_vars:
    file: defaults/main.yml
    name: main

- name: Add an Apt signing key for postgres
  ansible.builtin.apt_key:
    url: https://www.postgresql.org/media/keys/ACCC4CF8.asc
    state: present
 
- name: add postgres apt repository
  apt_repository: 
    repo: 'deb http://apt.postgresql.org/pub/repos/apt/ focal-pgdg main' 
    state: present 
    filename: postgress
    update_cache: yes

- name: install nautobot prerequisites
  apt: 
    name:
      - postgresql={{ postgresql_server_version }}
      - redis-server={{ redis_server_version }}
      - python3-postgresql
      - python3-venv
      - python3-pip
      - libpq-dev
      - python3-psycopg2
      - nginx={{ nginx_version }}
      - libldap2-dev 
      - libsasl2-dev 
      - libssl-dev
      - libxmlsec1-dev
      - libxmlsec1-openssl
      - pkg-config
    state: present

    #- name: Install bottle python package
    #  pip:
    #    name: pymysql
    #    executable: pip3
 
    #- name: Install bottle python package
    #  pip:
    #    name: pymysql

- name: ssl cert
  kosik_certificate:
    hosts: 
      - vmnautobot01.backoffice-int.mfit.systems
      - nautobot.backoffice-int.mfit.systems
      - ipam.mfit.systems
    profile: server
    state: present
  vars:
    ansible_python_interpreter: /usr/bin/python3

- name: Create a new nautobot database
  postgresql_db:
    name: "{{ dbname }}"
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0

    #- name: Create a new database with name 'nautobot'
    #  mysql_db:
    #    name: "{{ dbname }}"
    #    state: present

- name: All privs. to nautobot database
  postgresql_user:
    db: "{{ dbname }}"
    name: "{{ dbuser }}"
    priv: "ALL/ALL"
    password: "{{ dbpassword }}"
    state: present

    #- name: Create database user with password and all database privileges and 'WITH GRANT OPTION'
    #  mysql_user:
    #    name: "{{ dbuser }}"
    #    password: "{{ dbpassword }}"
    #    priv: 'nautobot.*:ALL,GRANT'
    #    state: present


# create user and group
- name: Ensure group "nautobot" exist
  group:
    name: "{{ nautobot_os_group }}"
    state: present
    gid: 8990
 
- name: Add the user 'nautobot' with a specific uid and a primary group of 'nautobot'
  ansible.builtin.user:
    name: "{{ nautobot_os_user }}"
    comment: Nautobot user
    uid: 8990
    group: "{{ nautobot_os_group }}"
    shell: /bin/bash
    home: "{{ nautobot_root }}"

- name: set custom bashrc profile for nautobot user
  copy: src=bashrc dest="{{ nautobot_root }}/.bashrc"

- name: create python3 venv for nautobot user
  command:
    cmd: sudo -u nautobot python3 -m venv "{{ nautobot_root }}"
    creates: "{{ nautobot_root }}/bin"

    #- name: install pip, wheel for nautobot user
    #  command: 
    #    cmd: 'pip3 install --upgrade pip wheel'
    #  pip3:
    #    name: 
    #    state: forcereinstall
    #  become_user: nautobot
    #  become: yes

- name: install pip, wheel for nautobot user
  pip:
    name: 
     - wheel
     - pip
    extra_args: --upgrade
    executable: pip3
  become_user: nautobot
  # become_method: su
  #  become: yes

- name: install nautobot
  pip:
    name:
     - "nautobot=={{ nautobot_version }}"
     - social-auth-core[saml]
     - django-auth-ldap
    executable: pip3
  become_user: nautobot


  #- name: nautobot server init 
  #  command:
  #    cmd: 'nautobot-server init'
  #    creates: "/opt/nautobot/.nautobot/nautobot_config.py"
  #  become: yes
  #  # become_method: su
  #  become_user: nautobot


- name: set nautobot config
  template: 
    src: nautobot_config.py.j2 
    dest: "{{ nautobot_root }}/.nautobot/nautobot_config.py"

- name: nautbot config symlink
  file:
    src: "{{ nautobot_root }}/.nautobot/nautobot_config.py"
    dest: "{{ nautobot_root }}/nautobot_config.py"
    mode: 0644
    state: link

- name: create folder for config lockfiles
  file:
    path: "{{ nautobot_root }}/.config_lock"
    state: directory
    mode: 0775
    owner: "{{ nautobot_os_user }}"
    group: "{{ nautobot_os_group }}"


    #- name: nautobot initial migrate
    #  command:
    #    cmd: 'su - nautobot -c nautobot-server migrate'
    #    creates: "/opt/nautobot/.config_lock/.nautobot_migrate.lock"
    #    #  become_user: nautobot

    #- name: nautobot create static folders
    #  command:
    #    cmd: 'su - nautobot -c nautobot-server collectstatic'
    #    creates: "/opt/nautobot/.nautobot/static"
    #  become_user: nautobot

- name: uWSGI config
  copy: 
    src: uwsgi.ini 
    dest: "{{ nautobot_root }}/uwsgi.ini"
    #    owner: "{{ nautobot_os_user }}"
    #    group: "{{ nautobot_os_group }}"

- name: nautbot vhost symlink
  file:
    src: "/etc/nginx/sites-available/nautobot.conf"
    dest: "/etc/nginx/sites-enabled/nautobot.conf"
    mode: 0644
    state: link


- name: nautobot systemd service
  template:
    src: nautobot.service.j2
    dest: /etc/systemd/system/nautobot.service

- name: nautobot-worker systemd service
  template:
    src: nautobot-worker.service.j2
    dest: /etc/systemd/system/nautobot-worker.service



# -----------------
# nginx setup
# -----------------
- name: nginx vhost
  copy:
    src: nautobot.conf
    dest: "/etc/nginx/sites-available/nautobot.conf"



